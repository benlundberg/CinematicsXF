// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CinematicsXF.Core.Dto.PersonDetail;
//
//    var personDetailResultDto = PersonDetailResultDto.FromJson(jsonString);

namespace CinematicsXF.Core.Dto.PersonDetail
{
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PersonDetailResultDto
    {
        [JsonProperty("birthday", NullValueHandling = NullValueHandling.Ignore)]
        public string Birthday { get; set; }

        [JsonProperty("known_for_department", NullValueHandling = NullValueHandling.Ignore)]
        public string KnownForDepartment { get; set; }

        [JsonProperty("deathday")]
        public string Deathday { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("also_known_as", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AlsoKnownAs { get; set; }

        [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gender { get; set; }

        [JsonProperty("biography", NullValueHandling = NullValueHandling.Ignore)]
        public string Biography { get; set; }

        [JsonProperty("popularity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Popularity { get; set; }

        [JsonProperty("place_of_birth", NullValueHandling = NullValueHandling.Ignore)]
        public string PlaceOfBirth { get; set; }

        [JsonProperty("profile_path", NullValueHandling = NullValueHandling.Ignore)]
        public string ProfilePath { get; set; }

        [JsonProperty("adult", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Adult { get; set; }

        [JsonProperty("imdb_id", NullValueHandling = NullValueHandling.Ignore)]
        public string ImdbId { get; set; }

        [JsonProperty("homepage")]
        public object Homepage { get; set; }
    }

    public partial class PersonDetailResultDto
    {
        public static PersonDetailResultDto FromJson(string json) => JsonConvert.DeserializeObject<PersonDetailResultDto>(json, CinematicsXF.Core.Dto.PersonDetail.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PersonDetailResultDto self) => JsonConvert.SerializeObject(self, CinematicsXF.Core.Dto.PersonDetail.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
